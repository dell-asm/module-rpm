// requires java >= 1.7
import java.nio.file.LinkOption
import java.nio.file.attribute.BasicFileAttributes
import java.nio.file.Files

defaultTasks 'clean','rpm'

buildscript {
    ext {
        env = System.getenv()
        buildNumber = env.BUILD_NUMBER ? env.BUILD_NUMBER.toString() : ((int) (System.currentTimeMillis() / 1000)).toString()
        BASE_REPO_URL = hasProperty('BASE_REPO_URL') ? BASE_REPO_URL          : 'http://10.35.178.198:8081/artifactory'
        ASMNEXT_REPO = hasProperty('ASMNEXT_REPO') ? ASMNEXT_REPO             : 'asmnext-trunk-ci'
        ASMNEXT_REPO_URL = hasProperty('ASMNEXT_REPO_URL') ? ASMNEXT_REPO_URL : "${BASE_REPO_URL}/${ASMNEXT_REPO}"
        PLUGINS_REPO = hasProperty('PLUGINS_REPO') ? PLUGINS_REPO             : 'plugins-release'
        PLUGINS_REPO_URL = hasProperty('PLUGINS_REPO_URL') ? PLUGINS_REPO_URL : "${BASE_REPO_URL}/${PLUGINS_REPO}"
        USE_LOCAL_REPO = hasProperty('USE_LOCAL_REPO') ? USE_LOCAL_REPO       : 'false'
        rpm_packageName = env.RPM_PACKAGENAME ? env.RPM_PACKAGENAME : 'Dell-ASM-puppet-module-'
        puppet_user = env.PUPPET_USER ? env.PUPPET_USER : 'puppet'
        modules = env.MODULES
        moduleVersion = env.MODULE_VERSION ? env.MODULE_VERSION : '10.0.0'

        rpm_description = env.RPM_DESCRIPTION ? env.RPM_DESCRIPTION : 'Puppet module packaged for consumption by Dell ASM'
        rpm_summary     = env.RPM_SUMMARY     ? env.RPM_SUMMARY     : 'Deprecated Puppet module packaged for consumption by Dell Active Systems Manager.'
        rpm_vendor      = env.RPM_VENDOR      ? env.RPM_VENDOR      : 'Dell Inc.'
        rpm_license     = env.RPM_LICENSE     ? env.RPM_LICENSE     : 'ASL 2.0'
        rpm_packager    = env.RPM_PACKAGER    ? env.RPM_PACKAGER    : 'canova'
        rpm_release     = env.RPM_RELEASE     ? env.RPM_RELEASE     : buildNumber
    }

    repositories {
        maven {
            url PLUGINS_REPO_URL
        }
    }
    dependencies {
        classpath 'org.redline-rpm:redline:1.1.12'
    }
}

task clean (type:Delete) {
    delete 'build'
}

task rpm() << {
    buildModuleRpms(project.modules,project.moduleVersion)
}

import org.freecompany.redline.payload.*
import org.freecompany.redline.header.*
def buildModuleRpms(modules,moduleVersion,puppetModulesFolder='/etc/puppetlabs/puppet/modules',rpmDestinationDirectory=(new File("${buildDir}/distributions"))) {

    if (! rpmDestinationDirectory.isDirectory()) {
        rpmDestinationDirectory.mkdirs()
    }

    def moduleList = modules.split(",")

    for (String module : moduleList) {

        def rpmUrl = "https://gitub.com/dell-asm/${module}"

        org.freecompany.redline.Builder rpmBuilder = new org.freecompany.redline.Builder()

        rpmBuilder.addDirectory("${puppetModulesFolder}", 0755, Directive.NONE, project.puppet_user, project.puppet_user)

        rpmBuilder.setPackage("${project.rpm_packageName}${module}", moduleVersion, project.rpm_release)
        rpmBuilder.setType(RpmType.BINARY)
        rpmBuilder.setPlatform(Architecture.NOARCH, 'LINUX')
        rpmBuilder.setSummary(project.rpm_summary)
        rpmBuilder.setDescription(project.rpm_description)
        rpmBuilder.setBuildHost('localhost')
        rpmBuilder.setLicense(project.rpm_license)
        rpmBuilder.setGroup('Enterprise Systems Management')
        rpmBuilder.setDistribution('')
        rpmBuilder.setVendor(project.rpm_vendor)
        rpmBuilder.setPackager(project.rpm_packager)
        rpmBuilder.setUrl(rpmUrl)

        println rpmBuilder.build(rpmDestinationDirectory)
    }
}
